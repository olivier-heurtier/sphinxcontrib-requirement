
.. highlight:: rest

Requirement Extension
=====================

``sphinxcontrib.requirement`` is a sphinx extension for managing requirements.
It can be used to:

* declare requirement (id are automatically generated)
* reference requirements (links are automatically generated)
* list all the requirements in a table

It is compatible with ``rst2pdf`` although the output does not look very nice.

Configure Sphinx
----------------

To enable this extension, add ``sphinxcontrib.requirement`` module to extensions
option at :file:`conf.py`.

.. code-block:: python

   # Enabled extensions
   extensions = ['sphinxcontrib.requirement']


Directives
----------

.. rst:directive:: req-declare

    This directive declares parameters for the requirement engine. The declaration
    applies to the next requirements (in the document) until another ``req-declare``
    directive is used.

    This directive accepts the following options:

    * ``prefix``: the prefix added to the requirement number. Can be considered a
      requirement group or category.
    * ``format``: the format used to build the requirement id. Must be a printf style
      format referencing the variables ``prefix``, ``docid`` and ``reqid``.
    * ``docid``: the document identifier used in the format to discriminate
      requirements from multiple documents
    * ``widths``: the widths of the column used when a requirement is displayed.
      (5 values are expected). If two values are provided, the second value is
      divided by 4 and applied to the fourth last columns.

.. rst:directive:: .. req:: [title]

    This directive inserts a new requirement.

    By default, the id is generated by incrementing a counter in the scope of the
    requirement prefix. The ``id`` can also be explicitely defined using the
    option ``id``.

    The directive content can include other Sphinx markups to define bold text,
    bullet list, etc. As a special case, a single *line block* markup (the pipe
    ``|``) can be used to define the beginning of a comment section. A special
    style is applied to the comment section (using italic font).

    As the requirement content may be copied multiple times (for instance, if
    included in a requirement table generated by the :rst:dir:`req-list`),
    it is strongly advised to avoid markups or directives that can have side
    effects (for example: ``versionadded``, because they are
    analyzed by the ``changes`` builder).

    This directive accepts the following options:

    * ``title``: an optional summary of the full requirement.
    * ``id``: define the requirement id
    * ``prefix``: define the requirement prefix used to allocate number and format the id
    * ``label``: a short name used to reference this requirement (useful when the id
      is generated by this extension)
    * ``priority``: define the priority of the requirement
    * ``allocation``: define the requirement allocation
    * ``owner``: owner of the requirement
    * ``parent``: requirement references (comma separated list) that generated this requirement
    * ``version``: version of the requirement
    * ``comment``: a free text comment, not used in the output
    * ``csv-file``: an external csv file (separated with ``;``) giving the requirements
      attributes (such as id, text, etc.). The first line must list the attributes
      included in each line. All requirements are imported and
      created using the other attributes (if specified), expect for the ``label``
      attribute that must be unique.
    * ``type``: the type of requirement, for example if the requirement
      is generic, custo, or specific.
    * ``category``: the category of the requirement. Possible list of category:
      Functional, Business Process, Data, Usability, Reliability, Performance, Supportability,
      Design Constraints, Implementation, Interface, Physical, Security, Production.
    * ``batch``: in which batch/work package the requirement is immplemented.

.. rst:directive:: req-list

    This directive generates a table with the selected requirements defined in
    the document.

    This directive accepts the following options:

    * ``caption``: title/legend/caption of the table. Can include ReST markups.
    * ``pattern``: specify a regular expression applied to the full requirement id
      to decide if the requirement must be included in the table or not.
    * ``widths``: specify the widths of the columns.
    * ``fields``: specify the fields to be included in the table. ``text`` is used
      to indicate the requirement full description is to be included.
    * ``headers``: specify the column headers
    * ``sort``: list of fields used for sorting (separated with comma). Default is ``reqname``
      (the id).

    .. only:: html
    
        See :ref:`here <sample-reqlist>` for a sample showing all possible fields.

Roles
-----

.. rst:role:: req

    This role can be used to generate references to requirements.

    It supports reference with the full id (as printed in the output), with the
    label, or with the numeric part of the requirement id, even if in this case
    this is less discriminative and can lead to a wrong reference.

    It supports also reference across multiple documents.

    It cannot be used from a requirement description (the role text will be left
    as is, with no link and no translation to the requirement id).
    If you want to reference another requirement, use the ``parent`` option.

Configuration File Options
--------------------------

req_prefix

   This is the default prefix used when none is specified. Default is ``REQ``

.. _basic-samples:

Basic Samples
-------------

To declare parameters for the engine::

    .. req-declare::
        :prefix: SPL
        :docid: DOC
        :format: %(prefix)s*%(docid)s*%(reqid)s

It will declare the default prefix to be ``SPL``, the docid to be ``DOC`` and
will also define the format used to generate the requirement full id.

.. req-declare::
    :prefix: SPL
    :docid: DOC
    :format: %(prefix)s*%(docid)s*%(reqid)s
    :widths: 20 80

To declare a new requirement and let the extension generate an id::

    .. req::
        :priority: B

        This is requirement #1. It contains a reference to :ref:`basic-samples`.

will produce:

    .. req::
        :priority: B

        This is requirement #1. It contains a reference to :ref:`basic-samples`.

It is possible to explicitely define the requirement id using the option ``id``::

    .. req::
        :id: my_id_for_req2

        This is requirement #2

will produce:

    .. req::
        :id: my_id_for_req2

        This is requirement #2

The prefix can also be selected for an individual requirement using the
option ``prefix``::

    .. req::
        :prefix: PREFIX

        This is requirement #3

will produce:

    .. req::
        :prefix: PREFIX

        This is requirement #3

Note how the number is incremented differently.

To facilitate cross referencing, use the option ``label``::

    .. req::
        :label: req4
        :priority: A

        This is requirement #4

will produce:

    .. req::
        :label: req4
        :priority: A

        This is requirement #4

The links between the parenthesis are links to texts that reference this requirement.

A reference can be made to this requirement using::

    A reference to :req:`req4`

will produce:

    A reference to :req:`req4`

The ``req`` role can be used using multiple forms, as in the following example::

    See requirement identified by its label :req:`req4` or this one
    identified by its full id :req:`SPL*DOC*002` or its numeric id (which is
    less discriminative if you use multiple prefix in the same document) :req:`002`.

will produce:

    See requirement identified by its label :req:`req4` or this one
    identified by its full id :req:`SPL*DOC*002` or its numeric id (which is
    less discriminative if you use multiple prefix in the same document) :req:`002`.

A table of requirements can be generated with::

    .. req-list::
        :caption: Table of Requirements
        :pattern: ^SPL.*
        :widths: 20 20 20 40

will produce:

    .. req-list::
        :caption: Table of Requirements
        :pattern: ^SPL.*
        :widths: 20 20 20 40
        
Note how requirement 3 is excluded by the pattern.

With the ``sort`` option::

    .. req-list::
        :caption: Table of Requirements
        :pattern: ^SPL.*
        :widths: 20 20 20 40
        :sort: priority,id

will produce:

    .. req-list::
        :caption: Table of Requirements
        :pattern: ^SPL.*
        :widths: 20 20 20 40
        :sort: priority,id

Advanced Samples
----------------
  
.. req:: A short summary: All options
    :id: ADV-100
    :prefix: ADV
    :label: adv-100
    :priority: high
    :allocation: subsys1
    :owner: IDEMIA
    :parent: req4, SPL*DOC*001
    :version: 1
    :type: Generic
    :category: Functional
    :batch: release

    This is a requirement with all possible options defined...

    The description can span multiple lines and includes **ReST** *markups*.

    Even lists are allowed:

    * One
    * Two

    |

    This is a comment used to describe the requirement. A special style is applied
    to the comment.

.. warning::

    Table inside requirement description are not compatible with Latex/PDF output.

This is a reference to the previous requirement: :req:`adv-100`.

.. req::
    :id: ADV-101
    :prefix: ADV
    :label: adv-101
    :priority: high
    :allocation: subsys1
    :owner: IDEMIA
    :parent: req4, SPL*DOC*001
    :version: 1
    :type: Generic
    :category: Functional
    :batch: release

    This is a requirement with all possible options defined but no title...

    The description can span multiple lines and includes **ReST** *markups*.

    Even lists are allowed:

    * One
    * Two

.. req:: Title for my requirement
    :id: ADV-102
    :prefix: ADV
    :label: adv-102
    :parent: req4, SPL*DOC*001
    :type: Generic
    :category: Functional
    :batch: release

    This is a requirement with no options from line 1.


.. raw:: latex

    \begin{landscape}
    
.. _sample-reqlist:

A table listing the advanced samples:

    .. req-list::
        :pattern: ADV.*
        :fields: id, prefix, label, priority, allocation, owner, parent, version, title, references
        :headers: id, prefix, label, priority, allocation, owner, parent, ver, title, refs
        :widths: 20,10,10,10,10,10,20,5,30, 10
    
.. raw:: latex

    \end{landscape}
        